{
  "name": "Go-pure",
  "tagline": "Pure (https://github.com/pureconfig/pureconfig) library for Golang",
  "body": "# go-pure\r\n\r\nThe Pure specifications can be found [here](https://github.com/pureconfig/pureconfig).\r\n\r\n# Setup\r\n\r\n`go get -u github.com/Krognol/go-pure`\r\n\r\n# Usage\r\nPure file:\r\n```\r\nintproperty = 43\r\n\r\nagroup.double = 1.23\r\n\r\nagroup\r\n    groupstring = \"Hello, world!\"\r\n\r\nrefstring => agroup.groupstring\r\nrefint => intproperty\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"io/ioutil\"\r\n\t\"os\"\r\n\r\n\t\"github.com/Krognol/pure\"\r\n)\r\n\r\ntype T struct {\r\n\tProperty int `pure:\"intproperty\"`\r\n\tGroup    *G  `pure:\"agroup\"`\r\n\tRefString string `pure:\"refstring\"`\r\n\tPropRef int `pure:\"refint\"`\r\n}\r\n\r\ntype G struct {\r\n\tString string  `pure:\"groupstring\"`\r\n\tDouble float64 `pure:\"double\"`\r\n}\r\n\r\nfunc main() {\r\n\tt := &T{0, &G{}}\r\n\tb, _ := ioutil.ReadFile(\"some-pure-file.pure\")\r\n\terr := pure.Unmarshal(b, t)\r\n\tif err != nil {\r\n\t\tprintln(err.Error())\r\n\t\tos.Exit(1)\r\n\t}\r\n\tprintln(t.Property)     // => 42\r\n\tprintln(t.Group.String) // => \"Hello, world!\"\r\n\tprintln(t.Group.Double) // => 1.23\r\n\tprintln(t.RefString)    // => \"Hello, world!\"\r\n\tprintln(t.PropRef)      // => 42\r\n\tos.Exit(0)\r\n}\r\n```\r\n## Nesting\r\n\r\nPure file:\r\n```\r\nnested\r\n\tanotherone\r\n\t\tprop = \"Hello, world!\"\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/Krognol/go-pure\"\r\n\t\"os\"\r\n\t\"io/ioutil\"\r\n)\r\n\r\ntype AnotherOne struct {\r\n\tString string `pure:\"prop\"`\r\n}\r\n\r\ntype Nested struct {\r\n\tAnotherNested *AnotherOne `pure:\"anotherone\"`\r\n}\r\n\r\ntype Base struct {\r\n\tNested *Nested `pure:\"nested\"`\r\n}\r\n\r\nfunc main() {\r\n\tbase := &Base{\r\n\t\tNested: &Nested{\r\n\t\t\tAnotherNested: &AnotherOne{},\r\n\t\t},\r\n\t}\r\n\r\n\tb, _ := ioutil.ReadFile(\"nested-group-file.pure\")\r\n\r\n\terr := pure.Unmarshal(b, base)\r\n\tif err != nil {\r\n\t\tprintln(err.Error())\r\n\t\tos.Exit(1)\r\n\t}\r\n\r\n\tprintln(base.Nested.AnotherNested.String) // => \"Hello, world!\"\r\n\tos.Exit(0)\r\n}\r\n```\r\n\r\n## Including files\r\n\r\nPure file to be included:\r\n```\r\nsomeproperty = 123\r\n```\r\n\r\nMain pure file:\r\n```\r\n%include ./someincludefile.pure\r\n\r\naProperty = \"some \\\r\n\t\t\t weird text \\\r\n\t\t\t here or something\"\r\n```\r\n\r\nGo program:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n\t\"io/ioutil\"\r\n\t\"github.com/Krognol/pure\"\r\n)\r\n\r\ntype Include struct {\r\n\t// Property to be included\r\n\tSomeProperty int `pure:\"someproperty\"`\r\n\r\n\t// Base file Property\r\n\tAProperty string `pure:\"aProperty\"`\r\n}\r\n\r\n\r\nfunc main() {\r\n\tit := &Include{}\r\n\tb, _ := ioutil.ReadFile(\"./some-pure-file.pure\")\r\n\terr := pure.Unmarshal(b, it)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tprintln(it.SomeProperty) // => 123\r\n\tprintln(it.AProperty)    // => \"some weird text here or something\"\r\n}\r\n```\r\n\r\n## Quantities\r\n\r\nPure file:\r\n```\r\nquantity = 5m^2\r\n```\r\n\r\nGo program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n\t\"io/ioutil\"\r\n\t\"github.com/Krognol/go-pure\"\r\n)\r\n\r\ntype Q struct {\r\n\tQuantity *pure.Quantity `pure:\"quantity\"`\r\n}\r\n\r\nfunc main() {\r\n\tq := &Q{}\r\n\tb, _ := ioutil.ReadFile(\"./quantity.pure\")\r\n\terr := pure.Unmarshal(b, q)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tprintln(q.Quantity.Value()) // => 5\r\n\tprintln(q.Quantity.Unit())  // => 'm^2'\r\n}\r\n```\r\n\r\n## Environment variables\r\n\r\nPure file:\r\n\r\n```\r\nenv = ${GOPATH}\r\n```\r\n\r\nGo program:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n\t\"io/ioutil\"\r\n\t\"github.com/Krognol/go-pure\"\r\n)\r\n\r\ntype Env struct {\r\n\tE *pure.Env `pure:\"env\"`\r\n}\r\n\r\nfunc main() {\r\n\te := &Env{}\r\n\tb, _ := ioutil.ReadFile(\"envfile.pure\")\r\n\terr := pure.Unmarshal(b, e)\r\n\tif err != nil {\r\n\t\tpenic(err)\r\n\t}\r\n\tprintln(e.E.Expand()) // => X:\\your\\go\\path\r\n\tos.Exit(0)\r\n}\r\n\r\n```\r\n\r\n## Paths\r\n\r\nPure file:\r\n```\r\ndir = ./some/directory/\r\nfile = ./some/directory/some/file.txt\r\n```\r\n\r\nGo program:\r\n```go\r\npackage main\r\n\r\nimport(\r\n\t\"io/ioutil\"\r\n\t\"os\"\r\n\t\"github.com/Krognol/go-pure\"\r\n)\r\n\r\ntype Dirs struct {\r\n\tDir *pure.Path `pure:\"dir\"`\r\n\tFile *pure.Path `pure:\"file\"`\r\n}\r\n\r\nfunc main() {\r\n\tdir := &Dirs{}\r\n\tb, _ := ioutil.ReadFile(\"./purefile.pure\")\r\n\terr := pure.Unmarshal(b, dir)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tprintln(dir.Dir.Base()) // => 'directory'\r\n\tprintln(dir.File.FileExtension()) // => '.txt'\r\n\tos.Exit(0)\r\n}\r\n```\r\n\r\n## Arrays\r\n\r\nFor now arrays only work for basic types (string, int, path...), and not for Groups.\r\n\r\nPure file:\r\n```\r\narray = [\r\n\t\"Hello\"\r\n\t\"World!\"\r\n]\r\n\r\nmap = [\r\n\tint = 123\r\n\tanotherint = 321\r\n]\r\n\r\nmap2 = [\r\n\tgroup\r\n\t\tint = 213\r\n]\r\n```\r\n\r\nGo program:\r\n\r\n```go\r\npackage main\r\n\r\nimport(\r\n\t\"os\"\r\n\t\"io/ioutil\"\r\n\t\"github.com/Krognol/go-pure\"\r\n)\r\n\r\ntype Group struct {\r\n\tInt int `pure:\"int\"`\r\n}\r\n\r\ntype Array struct {\r\n\tArr []string `pure:\"array\"`\r\n\tMap map[string]int `pure:\"array\"`\r\n\tGroupMap map[string]Group `pure:\"map2\"`\r\n}\r\n\r\nfunc main() {\r\n\tarr := &Array{Map: make(map[string]int)} // Very important to initialize the map before unmarshaling\r\n\tb, _ := ioutil.ReadFile(\"array-pure-file.pure\")\r\n\r\n\terr := pure.Unmarshal(b, arr)\r\n\tif err != nil {\r\n\t\tprintln(err.Error())\r\n\t\tos.Exit(1)\r\n\t}\r\n\r\n\tprintln(arr.Arr[0])        \t\t  // => \"Hello\"\r\n\tprintln(arr.Arr[1])        \t\t  // => \"World!\"\r\n\tprintln(arr.Map[\"int\"])    \t\t  // => 123\r\n\tprintln(arr.Map[\"anotherint\"])    // => 321\r\n\tprintln(arr.GroupMap[\"map2\"].Int) // => 213\r\n\tos.Exit(0)\r\n}\r\n\r\n```\r\n\r\n## Encoding\r\nGo program:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"os\"\r\n\r\n\t\"github.com/Krognol/pure\"\r\n)\r\n\r\ntype Nested struct {\r\n\tBool   bool   `pure:\"bool\"`\r\n\tString string `pure:\"another_string\"`\r\n}\r\n\r\ntype Group struct {\r\n\tBool   bool    `pure:\"bool\"`\r\n\tString string  `pure:\"another_string\"`\r\n\tNested *Nested `pure:\"nested\"`\r\n}\r\n\r\ntype EncodingTest struct {\r\n\tInt    int                `pure:\"int\"`\r\n\tDouble float64            `pure:\"double\"`\r\n\tString string             `pure:\"string\"`\r\n\tGroup  *Group             `pure:\"group\"`\r\n\tArray  []int              `pure:\"array\"`\r\n\tMap    map[string]float64 `pure:\"map\"`\r\n}\r\n\r\nfunc main() {\r\n\tg := &EncodingTest{\r\n\t\tInt:    1,\r\n\t\tDouble: 3.14,\r\n\t\tString: \"hello, world!\",\r\n\t\tGroup: &Group{\r\n\t\t\tBool:   true,\r\n\t\t\tString: \"yet another string\",\r\n\t\t\tNested: &Nested{\r\n\t\t\t\tBool:   false,\r\n\t\t\t\tString: \"nesting test\",\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n\tg.Array = []int{0, 1, 2, 3, 4}\r\n\tg.Map = map[string]float64{\"pi\": 3.14, \"two\": 2.13, \"one\": 1.12, \"zero\": 0.11}\r\n\tb, err := pure.Marhsal(g)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tf, _ := os.Create(\"encode_test.pure\")\r\n\t_, nerr := f.Write(b)\r\n\tif nerr != nil {\r\n\t\tpanic(nerr)\r\n\t}\r\n}\r\n```\r\nOutput file:\r\n```\r\nint = 1\r\ndouble = 3.14\r\nstring = \"hello, world!\"\r\ngroup\r\n    bool = true\r\n    another_string = \"yet another string\"\r\n    nested\r\n        bool = false\r\n        another_string = \"nesting test\"\r\n\r\narray = [\r\n    0\r\n    1\r\n    2\r\n    3\r\n    4\r\n]\r\n\r\n# Map order isn't guaranteed\r\nmap = [\r\n    pi = 3.14\r\n    two = 2.13\r\n    one = 1.12\r\n    zero = 0.11\r\n]\r\n\r\n```\r\n\r\n# Progress\r\n- [x] Dot notation groups\r\n- [x] Newline-tab groups\r\n- [x] Regular properties\r\n- [x] Referencing\r\n- [x] Quantities\r\n- [x] Paths\r\n- [x] Environment variables\r\n- [x] Group Nesting\r\n- [x] Arrays\r\n- [x] Include files\r\n- [x] Character escaping\r\n- [x] Multiline values\r\n- [x] Encoding to Pure format\r\n- [ ] Unquoted strings\r\n- [ ] Schema support\r\n\r\n# Contributing\r\n1. Fork it ( https://github.com/Krognol/go-pure/fork )\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Commit your changes (git commit -am 'Add some feature')\r\n4. Push to the branch (git push origin my-new-feature)\r\n5. Create a new Pull Request",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}